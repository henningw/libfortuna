.TH "sha2.c" 3 "Fri Oct 4 2019" "Version 1" "libfortuna" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sha2.c
.SH SYNOPSIS
.br
.PP
\fC#include <sys/param\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'sha2\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSHA256_SHORT_BLOCK_LENGTH\fP   (\fBSHA256_BLOCK_LENGTH\fP \- 8)"
.br
.ti -1c
.RI "#define \fBSHA384_SHORT_BLOCK_LENGTH\fP   (\fBSHA384_BLOCK_LENGTH\fP \- 16)"
.br
.ti -1c
.RI "#define \fBSHA512_SHORT_BLOCK_LENGTH\fP   (\fBSHA512_BLOCK_LENGTH\fP \- 16)"
.br
.ti -1c
.RI "#define \fBREVERSE32\fP(w,  x)"
.br
.ti -1c
.RI "#define \fBREVERSE64\fP(w,  x)"
.br
.ti -1c
.RI "#define \fBADDINC128\fP(w,  n)"
.br
.ti -1c
.RI "#define \fBR\fP(b,  x)   ((x) >> (b))"
.br
.ti -1c
.RI "#define \fBS32\fP(b,  x)   (((x) >> (b)) | ((x) << (32 \- (b))))"
.br
.ti -1c
.RI "#define \fBS64\fP(b,  x)   (((x) >> (b)) | ((x) << (64 \- (b))))"
.br
.ti -1c
.RI "#define \fBCh\fP(x,  y,  z)   (((x) & (y)) ^ ((~(x)) & (z)))"
.br
.ti -1c
.RI "#define \fBMaj\fP(x,  y,  z)   (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))"
.br
.ti -1c
.RI "#define \fBSigma0_256\fP(x)   (\fBS32\fP(2,  (x)) ^ \fBS32\fP(13, (x)) ^ \fBS32\fP(22, (x)))"
.br
.ti -1c
.RI "#define \fBSigma1_256\fP(x)   (\fBS32\fP(6,  (x)) ^ \fBS32\fP(11, (x)) ^ \fBS32\fP(25, (x)))"
.br
.ti -1c
.RI "#define \fBsigma0_256\fP(x)   (\fBS32\fP(7,  (x)) ^ \fBS32\fP(18, (x)) ^ \fBR\fP(3 ,   (x)))"
.br
.ti -1c
.RI "#define \fBsigma1_256\fP(x)   (\fBS32\fP(17, (x)) ^ \fBS32\fP(19, (x)) ^ \fBR\fP(10,   (x)))"
.br
.ti -1c
.RI "#define \fBSigma0_512\fP(x)   (\fBS64\fP(28, (x)) ^ \fBS64\fP(34, (x)) ^ \fBS64\fP(39, (x)))"
.br
.ti -1c
.RI "#define \fBSigma1_512\fP(x)   (\fBS64\fP(14, (x)) ^ \fBS64\fP(18, (x)) ^ \fBS64\fP(41, (x)))"
.br
.ti -1c
.RI "#define \fBsigma0_512\fP(x)   (\fBS64\fP( 1, (x)) ^ \fBS64\fP( 8, (x)) ^ \fBR\fP( 7,   (x)))"
.br
.ti -1c
.RI "#define \fBsigma1_512\fP(x)   (\fBS64\fP(19, (x)) ^ \fBS64\fP(61, (x)) ^ \fBR\fP( 6,   (x)))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef u_int8_t \fBsha2_byte\fP"
.br
.ti -1c
.RI "typedef u_int32_t \fBsha2_word32\fP"
.br
.ti -1c
.RI "typedef u_int64_t \fBsha2_word64\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBSHA256_Init\fP (\fBSHA256_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA256_Update\fP (\fBSHA256_CTX\fP *context, const u_int8_t *data, size_t len)"
.br
.ti -1c
.RI "void \fBSHA256_Last\fP (\fBSHA256_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA256_Final\fP (u_int8_t digest[], \fBSHA256_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA512_Init\fP (\fBSHA512_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA512_Update\fP (\fBSHA512_CTX\fP *context, const u_int8_t *data, size_t len)"
.br
.ti -1c
.RI "void \fBSHA512_Final\fP (u_int8_t digest[], \fBSHA512_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA384_Init\fP (\fBSHA384_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA384_Update\fP (\fBSHA384_CTX\fP *context, const u_int8_t *data, size_t len)"
.br
.ti -1c
.RI "void \fBSHA384_Final\fP (u_int8_t digest[], \fBSHA384_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA224_Init\fP (\fBSHA224_CTX\fP *context)"
.br
.ti -1c
.RI "void \fBSHA224_Update\fP (\fBSHA224_CTX\fP *context, const u_int8_t *data, size_t len)"
.br
.ti -1c
.RI "void \fBSHA224_Final\fP (u_int8_t digest[], \fBSHA224_CTX\fP *context)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBsha2_word32\fP \fBK256\fP [64]"
.br
.ti -1c
.RI "const \fBsha2_word32\fP \fBsha224_initial_hash_value\fP [8]"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ADDINC128(w, n)"
\fBValue:\fP
.PP
.nf
{ \
    (w)[0] += (sha2_word64)(n); \
    if ((w)[0] < (n)) { \
        (w)[1]++; \
    } \
}
.fi
.SS "#define Ch(x, y, z)   (((x) & (y)) ^ ((~(x)) & (z)))"

.SS "#define Maj(x, y, z)   (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))"

.SS "#define R(b, x)   ((x) >> (b))"

.SS "#define REVERSE32(w, x)"
\fBValue:\fP
.PP
.nf
{ \
    sha2_word32 tmp = (w); \
    tmp = (tmp >> 16) | (tmp << 16); \
    (x) = ((tmp & 0xff00ff00UL) >> 8) | ((tmp & 0x00ff00ffUL) << 8); \
}
.fi
.SS "#define REVERSE64(w, x)"
\fBValue:\fP
.PP
.nf
{ \
    sha2_word64 tmp = (w); \
    tmp = (tmp >> 32) | (tmp << 32); \
    tmp = ((tmp & 0xff00ff00ff00ff00ULL) >> 8) | \
          ((tmp & 0x00ff00ff00ff00ffULL) << 8); \
    (x) = ((tmp & 0xffff0000ffff0000ULL) >> 16) | \
          ((tmp & 0x0000ffff0000ffffULL) << 16); \
}
.fi
.SS "#define S32(b, x)   (((x) >> (b)) | ((x) << (32 \- (b))))"

.SS "#define S64(b, x)   (((x) >> (b)) | ((x) << (64 \- (b))))"

.SS "#define SHA256_SHORT_BLOCK_LENGTH   (\fBSHA256_BLOCK_LENGTH\fP \- 8)"

.SS "#define SHA384_SHORT_BLOCK_LENGTH   (\fBSHA384_BLOCK_LENGTH\fP \- 16)"

.SS "#define SHA512_SHORT_BLOCK_LENGTH   (\fBSHA512_BLOCK_LENGTH\fP \- 16)"

.SS "#define Sigma0_256(x)   (\fBS32\fP(2,  (x)) ^ \fBS32\fP(13, (x)) ^ \fBS32\fP(22, (x)))"

.SS "#define sigma0_256(x)   (\fBS32\fP(7,  (x)) ^ \fBS32\fP(18, (x)) ^ \fBR\fP(3 ,   (x)))"

.SS "#define Sigma0_512(x)   (\fBS64\fP(28, (x)) ^ \fBS64\fP(34, (x)) ^ \fBS64\fP(39, (x)))"

.SS "#define sigma0_512(x)   (\fBS64\fP( 1, (x)) ^ \fBS64\fP( 8, (x)) ^ \fBR\fP( 7,   (x)))"

.SS "#define Sigma1_256(x)   (\fBS32\fP(6,  (x)) ^ \fBS32\fP(11, (x)) ^ \fBS32\fP(25, (x)))"

.SS "#define sigma1_256(x)   (\fBS32\fP(17, (x)) ^ \fBS32\fP(19, (x)) ^ \fBR\fP(10,   (x)))"

.SS "#define Sigma1_512(x)   (\fBS64\fP(14, (x)) ^ \fBS64\fP(18, (x)) ^ \fBS64\fP(41, (x)))"

.SS "#define sigma1_512(x)   (\fBS64\fP(19, (x)) ^ \fBS64\fP(61, (x)) ^ \fBR\fP( 6,   (x)))"

.SH "Typedef Documentation"
.PP 
.SS "typedef u_int8_t \fBsha2_byte\fP"

.SS "typedef u_int32_t \fBsha2_word32\fP"

.SS "typedef u_int64_t \fBsha2_word64\fP"

.SH "Function Documentation"
.PP 
.SS "void SHA224_Final (u_int8_t digest[], \fBSHA224_CTX\fP * context)"

.SS "void SHA224_Init (\fBSHA224_CTX\fP * context)"

.SS "void SHA224_Update (\fBSHA224_CTX\fP * context, const u_int8_t * data, size_t len)"

.SS "void SHA256_Final (u_int8_t digest[], \fBSHA256_CTX\fP * context)"

.SS "void SHA256_Init (\fBSHA256_CTX\fP * context)"

.SS "void SHA256_Last (\fBSHA256_CTX\fP * context)"

.SS "void SHA256_Update (\fBSHA256_CTX\fP * context, const u_int8_t * data, size_t len)"

.SS "void SHA384_Final (u_int8_t digest[], \fBSHA384_CTX\fP * context)"

.SS "void SHA384_Init (\fBSHA384_CTX\fP * context)"

.SS "void SHA384_Update (\fBSHA384_CTX\fP * context, const u_int8_t * data, size_t len)"

.SS "void SHA512_Final (u_int8_t digest[], \fBSHA512_CTX\fP * context)"

.SS "void SHA512_Init (\fBSHA512_CTX\fP * context)"

.SS "void SHA512_Update (\fBSHA512_CTX\fP * context, const u_int8_t * data, size_t len)"

.SH "Variable Documentation"
.PP 
.SS "const \fBsha2_word32\fP K256[64]"
\fBInitial value:\fP
.PP
.nf
= {
    0x428a2f98UL, 0x71374491UL, 0xb5c0fbcfUL, 0xe9b5dba5UL,
    0x3956c25bUL, 0x59f111f1UL, 0x923f82a4UL, 0xab1c5ed5UL,
    0xd807aa98UL, 0x12835b01UL, 0x243185beUL, 0x550c7dc3UL,
    0x72be5d74UL, 0x80deb1feUL, 0x9bdc06a7UL, 0xc19bf174UL,
    0xe49b69c1UL, 0xefbe4786UL, 0x0fc19dc6UL, 0x240ca1ccUL,
    0x2de92c6fUL, 0x4a7484aaUL, 0x5cb0a9dcUL, 0x76f988daUL,
    0x983e5152UL, 0xa831c66dUL, 0xb00327c8UL, 0xbf597fc7UL,
    0xc6e00bf3UL, 0xd5a79147UL, 0x06ca6351UL, 0x14292967UL,
    0x27b70a85UL, 0x2e1b2138UL, 0x4d2c6dfcUL, 0x53380d13UL,
    0x650a7354UL, 0x766a0abbUL, 0x81c2c92eUL, 0x92722c85UL,
    0xa2bfe8a1UL, 0xa81a664bUL, 0xc24b8b70UL, 0xc76c51a3UL,
    0xd192e819UL, 0xd6990624UL, 0xf40e3585UL, 0x106aa070UL,
    0x19a4c116UL, 0x1e376c08UL, 0x2748774cUL, 0x34b0bcb5UL,
    0x391c0cb3UL, 0x4ed8aa4aUL, 0x5b9cca4fUL, 0x682e6ff3UL,
    0x748f82eeUL, 0x78a5636fUL, 0x84c87814UL, 0x8cc70208UL,
    0x90befffaUL, 0xa4506cebUL, 0xbef9a3f7UL, 0xc67178f2UL
}
.fi
.SS "const \fBsha2_word32\fP sha224_initial_hash_value[8]"
\fBInitial value:\fP
.PP
.nf
= {
    0xc1059ed8UL,
    0x367cd507UL,
    0x3070dd17UL,
    0xf70e5939UL,
    0xffc00b31UL,
    0x68581511UL,
    0x64f98fa7UL,
    0xbefa4fa4UL
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for libfortuna from the source code\&.
